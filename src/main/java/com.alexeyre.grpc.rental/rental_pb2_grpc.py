# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import rental_pb2 as rental__pb2


class RentalServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.rentalList = channel.unary_stream(
                '/RentalService.RentalService/rentalList',
                request_serializer=rental__pb2.RentalListRequest.SerializeToString,
                response_deserializer=rental__pb2.RentalListResponse.FromString,
                )
        self.rentalBooking = channel.stream_unary(
                '/RentalService.RentalService/rentalBooking',
                request_serializer=rental__pb2.RentalBookingRequest.SerializeToString,
                response_deserializer=rental__pb2.RentalBookingResponse.FromString,
                )


class RentalServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def rentalList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def rentalBooking(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RentalServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'rentalList': grpc.unary_stream_rpc_method_handler(
                    servicer.rentalList,
                    request_deserializer=rental__pb2.RentalListRequest.FromString,
                    response_serializer=rental__pb2.RentalListResponse.SerializeToString,
            ),
            'rentalBooking': grpc.stream_unary_rpc_method_handler(
                    servicer.rentalBooking,
                    request_deserializer=rental__pb2.RentalBookingRequest.FromString,
                    response_serializer=rental__pb2.RentalBookingResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'RentalService.RentalService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RentalService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def rentalList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/RentalService.RentalService/rentalList',
            rental__pb2.RentalListRequest.SerializeToString,
            rental__pb2.RentalListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def rentalBooking(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/RentalService.RentalService/rentalBooking',
            rental__pb2.RentalBookingRequest.SerializeToString,
            rental__pb2.RentalBookingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
